<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on</title><link>https://TheBlackHole12X.github.io/quartz/notes/</link><description>Recent content in Notes on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://TheBlackHole12X.github.io/quartz/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Descrizione della concorrenza</title><link>https://TheBlackHole12X.github.io/quartz/notes/Descrizione-della-concorrenza/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://TheBlackHole12X.github.io/quartz/notes/Descrizione-della-concorrenza/</guid><description>Esecuzione parallela Per eseguire un processo non sequenziale c&amp;rsquo;è la necessità di utilizzare:
Un elaboratore non sequenziale; un linguaggio di programmazione non sequenziale.</description></item><item><title>Elaborazione concorrente</title><link>https://TheBlackHole12X.github.io/quartz/notes/Elaborazione-concorrente/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://TheBlackHole12X.github.io/quartz/notes/Elaborazione-concorrente/</guid><description>Generalità Elaborazione Sequenziale vs Elaborazione Concorrente Per elaborazione sequenziale si intende l&amp;rsquo;esecuzione di un programma sequenziale le cui istruzioni vengano eseguite una dopo l&amp;rsquo;altra in un determinato ordine, quindi un&amp;rsquo;operazione deve essere completata prima che inizi una successiva operazione.</description></item><item><title>La comunicazione tra processi</title><link>https://TheBlackHole12X.github.io/quartz/notes/La-comunicazione-tra-processi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://TheBlackHole12X.github.io/quartz/notes/La-comunicazione-tra-processi/</guid><description>Introduzione I processi concorrenti interagiscono tra di loro condividendo risorse comuni. Possiamo individuare due modelli di interazione concorrente:
Modello a memoria comune; Modello a scambio di messaggi.</description></item><item><title>{{Semafori}}</title><link>https://TheBlackHole12X.github.io/quartz/notes/Semafori/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://TheBlackHole12X.github.io/quartz/notes/Semafori/</guid><description>Premessa I semafori possono essere utilizzati per gestire la mutua esclusione, garantendo che solo un processo o thread alla volta possa accedere alla risorsa condivisa.</description></item><item><title>{{Sincronizzazione tra processi}}</title><link>https://TheBlackHole12X.github.io/quartz/notes/Sincronizzazione-tra-processi/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://TheBlackHole12X.github.io/quartz/notes/Sincronizzazione-tra-processi/</guid><description>Sincronizzazione tra processi Errori nei programmi concorrenti Nella programmazione concorrente possiamo riscontrare maggiori difficoltà rispetto alla programmazione sequenziale, essa infatti ci introduce la possibilità di commettere errori dipendenti dal tempo, più difficili da correggere dato che i normali debugger non hanno la capacità di controllare la correttezza temporale.</description></item></channel></rss>